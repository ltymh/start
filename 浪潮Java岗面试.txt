
1、Java里面的类八大基本类型：四种整数类型byte、short、int、long；两种浮点类型float、double；一种字符类型char；一种布尔类型boolean
2、Java的特性：封装、继承、多态、抽象
3、多态的实现方式：重载，接口，继承。
	1）重载是指不同的函数使用相同的函数名，但是参数类型不同、参数个数不同甚至是参数顺序不同。调用的时候根据函数的参数区别不同的函数。
	2）覆盖（也叫重写）是指在派生类中重新对基类中的虚函数（注意是虚函数）重新实现。即函数名和参数都一样，只是函数的实现体不一样。

4、数据库左右连接：left table或right table，左右连接是基于多表查询的，左连接只影响右表，右连接只影响左表；左连接显示左表所有数据和右表中满足where的数据，右连接显示右表中所有数据和左表中满足where的数据。

　　左连接（left join）即为两张表进行连接时,是以处于left join语句左侧的表为基准去匹配left join语句右边的表，如果左表中的一条数据在右表中能找到与之对应的一条数据，那么就会出现在以虚表形式存在的结果表中，如果没有找到，那么会以null来代替右表中的数据去匹配左表。这样会有一个鲜明的对比，左表中的每一条数据中的对象在右表中的某个属性的存在性是一目了然的。同时在使用on 进行连接时，on的作用仅仅是进行两张表的上诉连接，发挥匹配的功能，它选出来的是满足这种匹配的所有结果，而并不一定是用户所需要的，这时候就要使用where进行条件判断，从而筛选出真正需要的信息。

　　右连接（right join）本质上是相当于将上述的左连接的这个过程反过来，以连接语句right join右侧的表为基准去匹配左边的表，剩下的道理是一样的，不再赘述。

　　内连接（inner join）就是在用两张表进行匹配的时候，如果表中任意一条数据在另一张表中都是找不到对应数据的话，那么在结果表中是不会有这一条数据的。也就是说必须是两张表中任意两条能够互相对应着的数据才能被存入到结果表中，有点类似于取交集的味道。

　　外链接（outer join）与内连接是相反的，就是说，如果某张表中的数据在另一张中找不到对应的条目并不影响它依然出现在查询的结果中，这对于两张表都是满足的，
两边都有出现null的可能，这就有一点数学里的并集的意思。


5、数据库分页查询：select * from 表名  limit  (pagenum-1)*pagesize, pagesize;   //pagenum是页数，pagesize是每一页显示的大小
6、Java转型问题：父类引用指向子类对象。
	把子类对象直接赋给父类引用叫upcasting向上转型，向上转型不用强制转换。通俗地讲即是将子类对象转为父类对象。Father f1 = new Son();  // 这就叫 upcasting （向上转型)
	把指向子类对象的父类引用赋给子类引用叫向下转型(downcasting)，要强制转换。

	向上向下转型的意义：使类的使用更加灵活简单……（未详细了解）

7、Linux下查看最后十行：tail -n 10 filename